CREATE SCHEMA IF NOT EXISTS ORDER_BASE;
CREATE SCHEMA IF NOT EXISTS ORDER_XFRM;
CREATE SCHEMA IF NOT EXISTS ORDER_ANALYSIS;
CREATE OR REPLACE TABLE ORDER_BASE.T_SALES_ORDER_HEADER (
        ORDER_ID VARCHAR(100),
        ORDER_DATE DATE,
        STATUS VARCHAR(100),
        CUSTOMER_ID VARCHAR(100),
        ITEM_COUNT INTEGER DEFAULT 0,
        TOTAL_AMOUNT NUMBER(12, 2) DEFAULT 0,
        DISCOUNT NUMBER(10, 2) DEFAULT 0,
        CREATE_DATE DATE,
        CREATE_USER VARCHAR(100)
    );
INSERT INTO ORDER_BASE.T_SALES_ORDER_HEADER (
        ORDER_ID,
        ORDER_DATE,
        STATUS,
        CUSTOMER_ID,
        CREATE_DATE,
        CREATE_USER
    )
VALUES (
        'ORD001',
        '2024-05-25',
        'OPEN',
        'CUST001',
        '2024-05-25',
        'John Doe'
    ),
    (
        'ORD002',
        '2024-05-26',
        'CLOSED',
        'CUST002',
        '2024-05-26',
        'Jane Smith'
    ),
    (
        'ORD003',
        '2024-05-27',
        'OPEN',
        'CUST003',
        '2024-05-27',
        'Michael Lee'
    ),
    (
        'ORD004',
        '2024-05-28',
        'CLOSED',
        'CUST004',
        '2024-05-28',
        'Alice Johnson'
    ),
    (
        'ORD005',
        '2024-05-29',
        'OPEN',
        'CUST005',
        '2024-05-29',
        'David Williams'
    );
SELECT *
FROM ORDER_BASE.T_SALES_ORDER_HEADER;
CREATE OR REPLACE TABLE ORDER_BASE.T_SALES_ORDER_DETAIL (
        ORDER_ID VARCHAR(100),
        ORDER_DATE DATE,
        CUSTOMER_ID VARCHAR(100),
        ITEM_ID VARCHAR(100),
        QTY INTEGER,
        PRICE FLOAT,
        TOTAL_AMOUNT NUMBER(12, 2) DEFAULT 0,
        CREATE_DATE DATE,
        CREATE_USER VARCHAR(100)
    );
INSERT INTO ORDER_BASE.T_SALES_ORDER_DETAIL (
        ORDER_ID,
        ORDER_DATE,
        CUSTOMER_ID,
        ITEM_ID,
        QTY,
        PRICE,
        CREATE_DATE,
        CREATE_USER
    )
VALUES (
        'ORD001',
        '2024-05-25',
        'CUST001',
        'ITEM001',
        5,
        100.00,
        '2024-05-25',
        'John Doe'
    ),
    (
        'ORD002',
        '2024-05-26',
        'CUST002',
        'ITEM002',
        10,
        75.50,
        '2024-05-26',
        'Jane Smith'
    ),
    (
        'ORD003',
        '2024-05-27',
        'CUST003',
        'ITEM003',
        15,
        87.25,
        '2024-05-27',
        'Michael Lee'
    ),
    (
        'ORD004',
        '2024-05-28',
        'CUST004',
        'ITEM004',
        20,
        55.00,
        '2024-05-28',
        'Alice Johnson'
    ),
    (
        'ORD005',
        '2024-05-29',
        'CUST005',
        'ITEM005',
        25,
        65.75,
        '2024-05-29',
        'David Williams'
    );
SELECT *
FROM ORDER_BASE.T_SALES_ORDER_DETAIL;
CREATE OR REPLACE TABLE ORDER_BASE.T_CUSTOMER (
        CUSTOMER_ID VARCHAR(100),
        ADDRESS VARCHAR(500),
        PHONE_NO VARCHAR(100),
        CATEGORY VARCHAR(100),
        STATUS VARCHAR(100),
        TOTAL_ORDERS INTEGER DEFAULT 0,
        TOTAL_INVOICE_AMOUNT NUMBER(12, 2) DEFAULT 0,
        LOYALTY_POINTS INTEGER DEFAULT 0,
        CREATE_DATE DATE,
        CREATE_USER VARCHAR(100)
    );
INSERT INTO ORDER_BASE.T_CUSTOMER (
        CUSTOMER_ID,
        ADDRESS,
        PHONE_NO,
        CATEGORY,
        STATUS,
        CREATE_DATE,
        CREATE_USER
    )
VALUES (
        'CUST001',
        '123, ABC Street, XYZ City',
        '1234567890',
        'GOLD',
        'ACTIVE',
        '2024-05-25',
        'John Doe'
    ),
    (
        'CUST002',
        '456, DEF Street, XYZ City',
        '2345678901',
        'SILVER',
        'ACTIVE',
        '2024-05-26',
        'Jane Smith'
    ),
    (
        'CUST003',
        '789, GHI Street, XYZ City',
        '3456789012',
        'BRONZE',
        'ACTIVE',
        '2024-05-27',
        'Michael Lee'
    ),
    (
        'CUST004',
        '012, JKL Street, XYZ City',
        '4567890123',
        'GOLD',
        'ACTIVE',
        '2024-05-28',
        'Alice Johnson'
    ),
    (
        'CUST005',
        '345, MNO Street, XYZ City',
        '5678901234',
        'SILVER',
        'ACTIVE',
        '2024-05-29',
        'David Williams'
    );
SELECT *
FROM ORDER_BASE.T_CUSTOMER;
CREATE OR REPLACE TABLE ORDER_BASE.T_PROMOTION (
        PROMOTION_ID VARCHAR(100),
        CUSTOMER_CATEGORY VARCHAR(100),
        PROMOTION_TYPE VARCHAR(100),
        PROMOTION_VALUE NUMBER(10, 2),
        COMMENT VARCHAR(200)
    );
INSERT INTO ORDER_BASE.T_PROMOTION (
        PROMOTION_ID,
        CUSTOMER_CATEGORY,
        PROMOTION_TYPE,
        PROMOTION_VALUE,
        COMMENT
    )
VALUES (
        '1001',
        'GOLD',
        'DISCOUNT',
        5,
        'PERCENT'
    ),
    (
        '1002',
        'SILVER',
        'DISCOUNT',
        3,
        'PERCENT'
    ),
    (
        '1003',
        'BRONZE',
        'DISCOUNT',
        1,
        'PERCENT'
    ),
    (
        '1004',
        'REGULAR',
        'COUPON_X',
        0.03,
        'AMOUNT'
    ),
    (
        '1005',
        'REGULAR',
        'COUPON_Y',
        0.02,
        'AMOUNT'
    ),
    (
        '1006',
        'REGULAR',
        'COUPON_Z',
        0.01,
        'AMOUNT'
    ),
    (
        '1007',
        'GOLD',
        'LOYALTY',
        100,
        'POINTS/1000 SPENT'
    ),
    (
        '1008',
        'SILVER',
        'LOYALTY',
        50,
        'POINTS/1000 SPENT'
    ),
    (
        '1009',
        'BRONZE',
        'LOYALTY',
        30,
        'POINTS/1000 SPENT'
    );
SELECT *
FROM ORDER_BASE.T_PROMOTION;
CREATE OR REPLACE PROCEDURE ORDER_BASE.P_UPDATE_META_DATA() RETURNS VARCHAR AS $$ BEGIN
UPDATE ORDER_BASE.T_SALES_ORDER_DETAIL
SET TOTAL_AMOUNT = QTY * PRICE;
UPDATE ORDER_BASE.T_SALES_ORDER_HEADER
SET TOTAL_AMOUNT = (
        SELECT SUM(TOTAL_AMOUNT)
        FROM ORDER_BASE.T_SALES_ORDER_DETAIL
        WHERE ORDER_ID = ORDER_BASE.T_SALES_ORDER_HEADER.ORDER_ID
    );
UPDATE ORDER_BASE.T_SALES_ORDER_HEADER
SET ITEM_COUNT = (
        SELECT COUNT(ITEM_ID)
        FROM ORDER_BASE.T_SALES_ORDER_DETAIL
        WHERE CUSTOMER_ID = ORDER_BASE.T_SALES_ORDER_DETAIL.CUSTOMER_ID
    );
UPDATE ORDER_BASE.T_CUSTOMER
SET TOTAL_ORDERS = (
        SELECT COUNT(ORDER_ID)
        FROM ORDER_BASE.T_SALES_ORDER_HEADER
        WHERE CUSTOMER_ID = ORDER_BASE.T_CUSTOMER.CUSTOMER_ID
    );
RETURN 'SUCCESS';
END;
$$;
CALL ORDER_BASE.P_UPDATE_META_DATA();
SELECT *
FROM ORDER_BASE.T_SALES_ORDER_HEADER;
SELECT *
FROM ORDER_BASE.T_CUSTOMER;
CREATE OR REPLACE VIEW ORDER_XFRM.V_SALES_ORDER_HEADER AS
SELECT ORDER_ID,
    ORDER_DATE,
    STATUS,
    CUSTOMER_ID,
    ITEM_COUNT,
    TOTAL_AMOUNT,
    DISCOUNT,
    CREATE_DATE,
    CREATE_USER
FROM ORDER_BASE.T_SALES_ORDER_HEADER;
SELECT *
FROM ORDER_XFRM.V_SALES_ORDER_HEADER;
CREATE OR REPLACE VIEW ORDER_XFRM.V_SALES_ORDER_DETAIL AS
SELECT ORDER_ID,
    ORDER_DATE,
    CUSTOMER_ID,
    ITEM_ID,
    QTY,
    PRICE,
    TOTAL_AMOUNT,
    CREATE_DATE,
    CREATE_USER
FROM ORDER_BASE.T_SALES_ORDER_DETAIL;
SELECT *
FROM ORDER_XFRM.V_SALES_ORDER_DETAIL;
CREATE OR REPLACE VIEW ORDER_XFRM.V_CUSTOMER AS
SELECT CUSTOMER_ID,
    ADDRESS,
    PHONE_NO,
    CATEGORY,
    STATUS,
    TOTAL_ORDERS,
    TOTAL_INVOICE_AMOUNT,
    LOYALTY_POINTS,
    CREATE_DATE,
    CREATE_USER
FROM ORDER_BASE.T_CUSTOMER;
SELECT *
FROM ORDER_XFRM.V_CUSTOMER;
CREATE OR REPLACE VIEW ORDER_XFRM.V_PROMOTION AS
SELECT PROMOTION_ID,
    CUSTOMER_CATEGORY,
    PROMOTION_TYPE,
    PROMOTION_VALUE,
    COMMENT
FROM ORDER_BASE.T_PROMOTION;
SELECT *
FROM ORDER_XFRM.V_PROMOTION;
CREATE OR REPLACE VIEW ORDER_ANALYSIS.V_SALES_ORDER_HDR_CORE AS
SELECT ORDER_ID,
    ORDER_DATE > CURRENT_DATE AS ORDER_DATE,
    STATUS,
    CUSTOMER_ID,
    ITEM_COUNT,
    TOTAL_AMOUNT,
    DISCOUNT,
    CREATE_DATE,
    CREATE_USER
FROM ORDER_XFRM.V_SALES_ORDER_HEADER;
SELECT *
FROM ORDER_ANALYSIS.V_SALES_ORDER_HDR_CORE;
CREATE OR REPLACE VIEW ORDER_ANALYSIS.V_CUSTOMER_CORE AS
SELECT CUSTOMER_ID,
    ADDRESS,
    PHONE_NO,
    CATEGORY,
    STATUS = 'ACTIVE' AS STATUS,
    TOTAL_ORDERS,
    TOTAL_INVOICE_AMOUNT,
    CREATE_DATE,
    CREATE_USER
FROM ORDER_BASE.T_CUSTOMER;
SELECT *
FROM ORDER_ANALYSIS.V_CUSTOMER_CORE;
CREATE OR REPLACE FUNCTION ORDER_BASE.F_PROMOTION_DISCOUNT() RETURNS TABLE (
        CUSTOMER_ID VARCHAR(100),
        DISCOUNT NUMBER(10, 2) DEFAULT 0
    ) AS $$
SELECT CUSTOMER_ID,
    CASE
        WHEN PROMOTION_TYPE = 'DISCOUNT' THEN TOTAL_AMOUNT * PROMOTION_VALUE / 100
        WHEN PROMOTION_TYPE = 'COUPON_X' THEN TOTAL_AMOUNT * (1 - 0.03)
        WHEN PROMOTION_TYPE = 'COUPON_Y' THEN TOTAL_AMOUNT * (1 - 0.02)
        WHEN PROMOTION_TYPE = 'COUPON_Z' THEN TOTAL_AMOUNT * (1 - 0.01)
        ELSE 0
    END AS DISCOUNT
FROM (
        SELECT c.CUSTOMER_ID,
            c.CATEGORY,
            p.PROMOTION_TYPE,
            p.PROMOTION_VALUE,
            soh.TOTAL_AMOUNT
        FROM ORDER_ANALYSIS.V_CUSTOMER_CORE c
            INNER JOIN ORDER_XFRM.V_PROMOTION p ON c.CATEGORY = p.CUSTOMER_CATEGORY
            INNER JOIN ORDER_BASE.T_SALES_ORDER_HEADER soh ON c.CUSTOMER_ID = soh.CUSTOMER_ID
    ) $$;
SELECT *
FROM TABLE(ORDER_BASE.F_PROMOTION_DISCOUNT());
CREATE OR REPLACE PROCEDURE ORDER_BASE.P_INVOICE_GENERATE() RETURNS VARCHAR AS $$ BEGIN
CREATE OR REPLACE VIEW ORDER_ANALYSIS.V_INVOICE AS
SELECT soh.ORDER_ID,
    soh.ORDER_DATE,
    soh.CUSTOMER_ID,
    CURRENT_DATE AS INVOICE_DATE,
    soh.TOTAL_AMOUNT * 9 / 100 AS TAX_AMOUNT,
    soh.TOTAL_AMOUNT,
    pd.DISCOUNT,
    (soh.TOTAL_AMOUNT * 9 / 100) + soh.TOTAL_AMOUNT - pd.DISCOUNT AS FINAL_INVOICE_AMT,
    CURRENT_DATE AS CREATE_DATE,
    'DEFAULT' AS CREATE_USER
FROM ORDER_XFRM.V_SALES_ORDER_HEADER soh
    INNER JOIN ORDER_XFRM.V_SALES_ORDER_DETAIL sod ON soh.ORDER_ID = sod.ORDER_ID
    INNER JOIN TABLE(ORDER_BASE.F_PROMOTION_DISCOUNT()) pd ON soh.CUSTOMER_ID = pd.CUSTOMER_ID;
UPDATE ORDER_BASE.T_CUSTOMER
SET TOTAL_INVOICE_AMOUNT = (
        SELECT SUM(FINAL_INVOICE_AMT)
        FROM ORDER_ANALYSIS.V_INVOICE
        WHERE CUSTOMER_ID = ORDER_BASE.T_CUSTOMER.CUSTOMER_ID
    );
UPDATE ORDER_BASE.T_SALES_ORDER_HEADER
SET DISCOUNT = (
        SELECT SUM(DISCOUNT)
        FROM ORDER_ANALYSIS.V_INVOICE
        WHERE ORDER_ID = ORDER_BASE.T_SALES_ORDER_HEADER.ORDER_ID
    );
UPDATE ORDER_BASE.T_CUSTOMER
SET LOYALTY_POINTS = ORDER_BASE.T_CUSTOMER.LOYALTY_POINTS + p.PROMOTION_VALUE
FROM ORDER_XFRM.V_CUSTOMER cu
    INNER JOIN ORDER_XFRM.V_PROMOTION p ON cu.CATEGORY = p.CUSTOMER_CATEGORY
WHERE p.PROMOTION_TYPE = 'LOYALTY';
RETURN 'SUCCESS';
END;
$$;
CALL ORDER_BASE.P_INVOICE_GENERATE();
SELECT *
FROM ORDER_ANALYSIS.V_INVOICE;
SELECT *
FROM ORDER_BASE.T_CUSTOMER;
SELECT *
FROM ORDER_BASE.T_SALES_ORDER_DETAIL;
SELECT *
FROM ORDER_BASE.T_SALES_ORDER_HEADER;