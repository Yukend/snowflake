CREATE 
OR REPLACE PROCEDURE Y_SIM_BOM.BMATHUB_BASE.P_ROOT_CORE_BUILD() 
RETURNS VARCHAR 
LANGUAGE SQL 
AS 
$$ 
BEGIN 
MERGE INTO Y_SIM_BOM.BMATHUB_BASE.T_COMPRESS_BOM_CORE tgt
USING (
  SELECT 
    INPUT_ITEM_ID, 
    mr.ITEM_CLASS_NM, 
    OUTPUT_ITEM_ID, 
    100 + ROW_NUMBER() OVER (
      ORDER BY 
        INPUT_ITEM_ID
    ) AS BOM_NUM, 
    mr.LOC 
  FROM 
    (
      SELECT 
        ob.INPUT_ITEM_ID, 
        idr.ITEM_CLASS_NM, 
        ob.OUTPUT_ITEM_ID, 
        LOC 
      FROM 
        Y_SIM_BOM.BMATHUB_XFRM.V_ORIG_BOM ob 
        INNER JOIN Y_SIM_BOM.BMATHUB_XFRM.V_ITEM_DETAIL_ROOT idr ON ob.OUTPUT_ITEM_ID = idr.ITEM_ID 
      WHERE
        idr.ITEM_CLASS_NM = 'UPI_DIE_PREP'
        AND idr.DELETE_IND = FALSE
      UNION 
      SELECT 
        ob.OUTPUT_ITEM_ID AS INPUT_ITEM_ID, 
        idr.ITEM_CLASS_NM, 
        '' AS OUTPUT_ITEM_ID, 
        LOC 
      FROM 
        Y_SIM_BOM.BMATHUB_XFRM.V_ORIG_BOM ob 
        INNER JOIN Y_SIM_BOM.BMATHUB_XFRM.V_ITEM_DETAIL_ROOT idr ON ob.OUTPUT_ITEM_ID = idr.ITEM_ID 
      WHERE 
        idr.ITEM_CLASS_NM = 'IC' 
        AND idr.DELETE_IND = FALSE
    ) bc 
    LEFT JOIN Y_SIM_BOM.BMATHUB_XFRM.V_METADATA_RULES mr ON bc.ITEM_CLASS_NM = mr.ITEM_CLASS_NM
) src
ON tgt.INPUT_ITEM_ID = src.INPUT_ITEM_ID
WHEN MATCHED THEN
  UPDATE SET
    tgt.ITEM_CLASS_NM = src.ITEM_CLASS_NM,
    tgt.OUTPUT_ITEM_ID = src.OUTPUT_ITEM_ID,
    tgt.BOM_NUM = src.BOM_NUM,
    tgt.LOC = src.LOC
WHEN NOT MATCHED THEN
  INSERT (
    INPUT_ITEM_ID, ITEM_CLASS_NM, OUTPUT_ITEM_ID, BOM_NUM, LOC
  )
  VALUES (
    src.INPUT_ITEM_ID, src.ITEM_CLASS_NM, src.OUTPUT_ITEM_ID, src.BOM_NUM, src.LOC
  );
RETURN 'Data loaded successfully.';
END;
$$;
