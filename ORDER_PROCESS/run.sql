CREATE 
OR REPLACE SCHEMA ORDER_BASE;
CREATE 
OR REPLACE SCHEMA ORDER_XFRM;
CREATE 
OR REPLACE SCHEMA ORDER_ANALYSIS;
CREATE 
OR REPLACE TABLE ORDER_BASE.T_CUSTOMER (
  CUSTOMER_ID VARCHAR(100), 
  ADDRESS VARCHAR(500), 
  PHONE_NO VARCHAR(100), 
  CATEGORY VARCHAR(100), 
  STATUS VARCHAR(100), 
  TOTAL_ORDERS INTEGER DEFAULT 0, 
  TOTAL_INVOICE_AMOUNT NUMBER(12, 2) DEFAULT 0, 
  LOYALTY_POINTS INTEGER DEFAULT 0, 
  CREATE_DATE DATE, 
  CREATE_USER VARCHAR(100)
);
INSERT INTO ORDER_BASE.T_CUSTOMER (
    CUSTOMER_ID, ADDRESS, PHONE_NO, CATEGORY, 
    STATUS, CREATE_DATE, CREATE_USER
) 
VALUES 
    (
        'CUST001', '123, ABC Street, XYZ City', 
        '1234567890', 'GOLD', 'ACTIVE', DATEADD(MONTH, -5, CURRENT_DATE()), 
        'John Doe'
    ), 
    (
        'CUST002', '456, DEF Street, XYZ City', 
        '2345678901', 'SILVER', 'ACTIVE', 
        DATEADD(MONTH, -5, CURRENT_DATE()), 'Jane Smith'
    ), 
    (
        'CUST003', '789, GHI Street, XYZ City', 
        '3456789012', 'BRONZE', 'ACTIVE', 
        DATEADD(MONTH, -5, CURRENT_DATE()), 'Michael Lee'
    ), 
    (
        'CUST004', '012, JKL Street, XYZ City', 
        '4567890123', 'REGULAR', 'ACTIVE', 
        DATEADD(MONTH, -5, CURRENT_DATE()), 'Alice Johnson'
    ), 
    (
        'CUST005', '345, MNO Street, XYZ City', 
        '5678901234', 'REGULAR', 'ACTIVE', 
        DATEADD(MONTH, -5, CURRENT_DATE()), 'David Williams'
    ), 
    (
        'CUST006', '346, MNO Street, XYZ City', 
        '5678901235', 'REGULAR', 'ACTIVE', 
        DATEADD(MONTH, -5, CURRENT_DATE()), 'David Willy'
    ), 
    (
        'CUST007', '347, MNO Street, XYZ City', 
        '5678901236', 'GOLD', 'ACTIVE', DATEADD(MONTH, -5, CURRENT_DATE()), 
        'David William'
    ), 
    (
        'CUST008', '348, MNO Street, XYZ City', 
        '5678901237', 'SILVER', 'ACTIVE', 
        DATEADD(MONTH, -5, CURRENT_DATE()), 'David Will'
    ), 
    (
        'CUST009', '349, MNO Street, XYZ City', 
        '5678901238', 'BRONZE', 'ACTIVE', 
        DATEADD(MONTH, -5, CURRENT_DATE()), 'David Wil'
    ), 
    (
        'CUST010', '350, MNO Street, XYZ City', 
        '5678901239', 'REGULAR', 'ACTIVE', 
        DATEADD(MONTH, -5, CURRENT_DATE()), 'David Wi'
    ),
    (
        'CUST011', '351, MNO Street, XYZ City', 
        '5678901240', 'REGULAR', 'ACTIVE', DATEADD(MONTH, -5, CURRENT_DATE()), 
        'David Wilson'
    ), 
    (
        'CUST012', '352, MNO Street, XYZ City', 
        '5678901241', 'REGULAR', 'ACTIVE', 
        DATEADD(MONTH, -5, CURRENT_DATE()), 'David Wilson'
    ), 
    (
        'CUST013', '353, MNO Street, XYZ City', 
        '5678901242', 'RARE', 'ACTIVE', 
        DATEADD(MONTH, -5, CURRENT_DATE()), 'David Wilson'
    ), 
    (
        'CUST014', '354, MNO Street, XYZ City', 
        '5678901243', 'RARE', 'ACTIVE', 
        DATEADD(MONTH, -5, CURRENT_DATE()), 'David Wilson'
    ), 
    (
        'CUST015', '355, MNO Street, XYZ City', 
        '5678901244', 'RARE', 'ACTIVE', 
        DATEADD(MONTH, -5, CURRENT_DATE()), 'David Wilson'
    );
SELECT 
  * 
FROM 
  ORDER_BASE.T_CUSTOMER;
CREATE 
OR REPLACE TABLE ORDER_BASE.T_SALES_ORDER_DETAIL (
  ORDER_ID VARCHAR(100), 
  ORDER_DATE DATE, 
  CUSTOMER_ID VARCHAR(100), 
  ITEM_ID VARCHAR(100), 
  QTY INTEGER, 
  PRICE FLOAT, 
  TOTAL_AMOUNT NUMBER(12, 2) DEFAULT 0, 
  CREATE_DATE DATE, 
  CREATE_USER VARCHAR(100)
);
INSERT INTO ORDER_BASE.T_SALES_ORDER_DETAIL (
  ORDER_ID, ORDER_DATE, CUSTOMER_ID, 
  ITEM_ID, QTY, PRICE, CREATE_DATE, 
  CREATE_USER
) 
VALUES 
(
    'ORDER001', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST001', 
    'ITEM001', 2, 10.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'John Doe'
), 
(
    'ORDER001', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST001', 
    'ITEM002', 3, 5.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'John Doe'
), 
(
    'ORDER001', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST001', 
    'ITEM003', 1, 8.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'John Doe'
), 
(
    'ORDER002', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST002', 
    'ITEM004', 2, 15.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'Jane Smith'
), 
(
    'ORDER002', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST002', 
    'ITEM005', 1, 12.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'Jane Smith'
), 
(
    'ORDER002', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST002', 
    'ITEM006', 4, 9.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'Jane Smith'
), 
(
    'ORDER003', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST003', 
    'ITEM007', 3, 7.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'Michael Lee'
), 
(
    'ORDER003', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST003', 
    'ITEM008', 2, 11.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'Michael Lee'
), 
(
    'ORDER003', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST003', 
    'ITEM009', 1, 6.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'Michael Lee'
), 
(
    'ORDER004', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST004', 
    'ITEM010', 2, 14.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'Alice Johnson'
), 
(
    'ORDER004', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST004', 
    'ITEM011', 3, 8.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'Alice Johnson'
), 
(
    'ORDER004', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST004', 
    'ITEM012', 1, 10.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'Alice Johnson'
), 
(
    'ORDER005', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST005', 
    'ITEM013', 2, 9.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Williams'
), 
(
    'ORDER005', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST005', 
    'ITEM014', 1, 11.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Williams'
), 
(
    'ORDER005', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST005', 
    'ITEM015', 4, 7.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Williams'
), 
(
    'ORDER006', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST006', 
    'ITEM016', 3, 6.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Willy'
), 
(
    'ORDER006', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST006', 
    'ITEM017', 2, 10.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Willy'
), 
(
    'ORDER006', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST006', 
    'ITEM018', 1, 8.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Willy'
), 
(
    'ORDER007', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST007', 
    'ITEM019', 2, 12.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David William'
), 
(
    'ORDER007', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST007', 
    'ITEM020', 3, 9.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David William'
), 
(
    'ORDER007', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST007', 
    'ITEM021', 1, 11.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David William'
), 
(
    'ORDER008', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST008', 
    'ITEM022', 2, 8.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Will'
), 
(
    'ORDER008', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST008', 
    'ITEM023', 1, 10.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Will'
), 
(
    'ORDER008', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST008', 
    'ITEM024', 4, 6.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Will'
), 
(
    'ORDER009', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST009', 
    'ITEM025', 3, 9.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wil'
), 
(
    'ORDER009', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST009', 
    'ITEM026', 2, 11.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wil'
), 
(
    'ORDER009', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST009', 
    'ITEM027', 1, 7.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wil'
), 
(
    'ORDER010', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST010', 
    'ITEM028', 2, 10.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wi'
), 
(
    'ORDER010', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST010', 
    'ITEM029', 3, 8.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wi'
), 
(
    'ORDER010', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST010', 
    'ITEM030', 1, 12.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wi'
), 
(
    'ORDER011', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST011', 
    'ITEM031', 2, 11.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wilson'
), 
(
    'ORDER011', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST011', 
    'ITEM032', 1, 9.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wilson'
), 
(
    'ORDER011', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST011', 
    'ITEM033', 4, 7.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wilson'
), 
(
    'ORDER012', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST012', 
    'ITEM034', 3, 6.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wilson'
), 
(
    'ORDER012', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST012', 
    'ITEM035', 2, 10.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wilson'
), 
(
    'ORDER012', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST012', 
    'ITEM036', 1, 8.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wilson'
), 
(
    'ORDER013', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST013', 
    'ITEM037', 2, 12.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wilson'
), 
(
    'ORDER013', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST013', 
    'ITEM038', 3, 9.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wilson'
), 
(
    'ORDER013', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST013', 
    'ITEM039', 1, 11.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wilson'
), 
(
    'ORDER014', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST014', 
    'ITEM040', 2, 8.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wilson'
), 
(
    'ORDER014', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST014', 
    'ITEM041', 1, 10.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wilson'
), 
(
    'ORDER014', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST014', 
    'ITEM042', 4, 6.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wilson'
), 
(
    'ORDER015', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST015', 
    'ITEM043', 3, 9.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wilson'
), 
(
    'ORDER015', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST015', 
    'ITEM044', 2, 11.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wilson'
), 
(
    'ORDER015', DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 'CUST015', 
    'ITEM045', 1, 7.99, DATEADD(MONTH, -1 * RAND() * 3, CURRENT_DATE()), 
    'David Wilson'
)
;
SELECT 
  * 
FROM 
  ORDER_BASE.T_SALES_ORDER_DETAIL;
CREATE 
OR REPLACE TABLE ORDER_BASE.T_SALES_ORDER_HEADER (
  ORDER_ID VARCHAR(100), 
  ORDER_DATE DATE, 
  STATUS VARCHAR(100), 
  CUSTOMER_ID VARCHAR(100), 
  ITEM_COUNT INTEGER DEFAULT 0, 
  TOTAL_AMOUNT NUMBER(12, 2) DEFAULT 0, 
  DISCOUNT NUMBER(10, 2) DEFAULT 0, 
  COUPON VARCHAR(100), 
  CREATE_DATE DATE, 
  CREATE_USER VARCHAR(100)
);
INSERT INTO ORDER_BASE.T_SALES_ORDER_HEADER (
  ORDER_ID, ORDER_DATE, STATUS, CUSTOMER_ID, 
  COUPON, CREATE_DATE, CREATE_USER
) 
VALUES 
  (
    'ORD001', '2024-05-31', 'ACTIVE', 
    'CUST001', null, '2024-05-31', 'John Doe'
  ), 
  (
    'ORD002', '2024-05-31', 'ACTIVE', 
    'CUST002', null, '2024-05-31', 'Jane Smith'
  ), 
  (
    'ORD003', '2024-05-29', 'ACTIVE', 
    'CUST003', null, '2024-05-29', 'Michael Lee'
  ), 
  (
    'ORD004', '2024-05-29', 'ACTIVE', 
    'CUST004', 'COUPON_X', '2024-05-29', 
    'Alice Johnson'
  ), 
  (
    'ORD005', '2024-05-30', 'ACTIVE', 
    'CUST005', 'COUPON_Y', '2024-05-30', 
    'David Williams'
  ), 
  (
    'ORD006', '2024-05-30', 'ACTIVE', 
    'CUST006', 'COUPON_Z', '2024-05-30', 
    'David Willy'
  ), 
  (
    'ORD007', '2024-05-25', 'CLOSED', 
    'CUST001', null, '2024-05-25', 'John Doe'
  ), 
  (
    'ORD008', '2024-05-26', 'CLOSED', 
    'CUST002', null, '2024-05-26', 'Jane Smith'
  ), 
  (
    'ORD009', '2024-05-27', 'CLOSED', 
    'CUST003', null, '2024-05-27', 'Michael Lee'
  ), 
  (
    'ORD0010', '2024-05-28', 'CLOSED', 
    'CUST004', 'COUPON_X', '2024-05-28', 
    'Alice Johnson'
  ), 
  (
    'ORD0011', '2024-05-26', 'CLOSED', 
    'CUST005', 'COUPON_Y', '2024-05-26', 
    'David Williams'
  ), 
  (
    'ORD0012', '2024-05-26', 'CLOSED', 
    'CUST006', 'COUPON_Z', '2024-05-26', 
    'David Willy'
  );
SELECT 
  * 
FROM 
  ORDER_BASE.T_SALES_ORDER_HEADER;
CREATE 
OR REPLACE TABLE ORDER_BASE.T_PROMOTION (
  PROMOTION_ID VARCHAR(100), 
  CUSTOMER_CATEGORY VARCHAR(100), 
  PROMOTION_TYPE VARCHAR(100), 
  PROMOTION_VALUE NUMBER(10, 2), 
  COMMENT VARCHAR(200)
);
INSERT INTO ORDER_BASE.T_PROMOTION (
  PROMOTION_ID, CUSTOMER_CATEGORY, 
  PROMOTION_TYPE, PROMOTION_VALUE, 
  COMMENT
) 
VALUES 
  (
    '1001', 'GOLD', 'DISCOUNT', 5, 'PERCENT'
  ), 
  (
    '1002', 'SILVER', 'DISCOUNT', 3, 'PERCENT'
  ), 
  (
    '1003', 'BRONZE', 'DISCOUNT', 1, 'PERCENT'
  ), 
  (
    '1004', 'REGULAR', 'COUPON_X', 0.03, 
    'AMOUNT'
  ), 
  (
    '1005', 'REGULAR', 'COUPON_Y', 0.02, 
    'AMOUNT'
  ), 
  (
    '1006', 'REGULAR', 'COUPON_Z', 0.01, 
    'AMOUNT'
  ), 
  (
    '1007', 'GOLD', 'LOYALTY', 100, 'POINTS/1000 SPENT'
  ), 
  (
    '1008', 'SILVER', 'LOYALTY', 50, 'POINTS/1000 SPENT'
  ), 
  (
    '1009', 'BRONZE', 'LOYALTY', 30, 'POINTS/1000 SPENT'
  );
SELECT 
  * 
FROM 
  ORDER_BASE.T_PROMOTION;
CREATE 
OR REPLACE TABLE ORDER_BASE.T_INVOICE (
  ORDER_ID VARCHAR(100), 
  ORDER_DATE DATE, 
  CUSTOMER_ID VARCHAR(100), 
  INVOICE_DATE DATE, 
  TAX_AMOUNT NUMBER(12, 2), 
  TOTAL_AMOUNT NUMBER(12, 2), 
  DISCOUNT NUMBER(10, 2), 
  FINAL_INVOICE_AMT NUMBER(12, 2), 
  CREATE_DATE DATE, 
  CREATE_USER VARCHAR(100)
);
SELECT 
  * 
FROM 
  ORDER_BASE.T_INVOICE;
CREATE 
OR REPLACE PROCEDURE ORDER_BASE.P_UPDATE_META_DATA() RETURNS VARCHAR AS $$ BEGIN 
UPDATE 
  ORDER_BASE.T_SALES_ORDER_DETAIL 
SET 
  TOTAL_AMOUNT = QTY * PRICE;
MERGE INTO ORDER_BASE.T_SALES_ORDER_HEADER AS target USING (
  SELECT 
    ORDER_ID, 
    SUM(TOTAL_AMOUNT) AS SUM_AMOUNT 
  FROM 
    ORDER_BASE.T_SALES_ORDER_DETAIL 
  GROUP BY 
    ORDER_ID
) AS source ON target.ORDER_ID = source.ORDER_ID WHEN MATCHED THEN 
UPDATE 
SET 
  TOTAL_AMOUNT = source.SUM_AMOUNT;
MERGE INTO ORDER_BASE.T_SALES_ORDER_HEADER AS target USING (
  SELECT 
    soh.ORDER_ID, 
    COUNT(ITEM_ID) AS COUNT 
  FROM 
    ORDER_BASE.T_SALES_ORDER_HEADER soh 
    INNER JOIN ORDER_BASE.T_SALES_ORDER_DETAIL sod ON soh.order_id = sod.order_id 
  GROUP BY 
    soh.ORDER_ID
) AS source ON target.ORDER_ID = source.ORDER_ID WHEN MATCHED THEN 
UPDATE 
SET 
  ITEM_COUNT = source.COUNT;
MERGE INTO ORDER_BASE.T_CUSTOMER AS target USING (
  SELECT 
    CUSTOMER_ID, 
    COUNT(ORDER_ID) AS COUNT 
  FROM 
    ORDER_BASE.T_SALES_ORDER_HEADER 
  GROUP BY 
    CUSTOMER_ID
) AS source ON target.CUSTOMER_ID = source.CUSTOMER_ID WHEN MATCHED THEN 
UPDATE 
SET 
  TOTAL_ORDERS = source.COUNT;
RETURN 'SUCCESS';
END;
$$;
CALL ORDER_BASE.P_UPDATE_META_DATA();
SELECT 
  * 
FROM 
  ORDER_BASE.T_SALES_ORDER_DETAIL;
SELECT 
  * 
FROM 
  ORDER_BASE.T_SALES_ORDER_HEADER;
SELECT 
  * 
FROM 
  ORDER_BASE.T_CUSTOMER;
CREATE 
OR REPLACE VIEW ORDER_XFRM.V_CUSTOMER AS 
SELECT 
  CUSTOMER_ID, 
  ADDRESS, 
  PHONE_NO, 
  CATEGORY, 
  STATUS, 
  TOTAL_ORDERS, 
  TOTAL_INVOICE_AMOUNT, 
  LOYALTY_POINTS, 
  CREATE_DATE, 
  CREATE_USER 
FROM 
  ORDER_BASE.T_CUSTOMER;
SELECT 
  * 
FROM 
  ORDER_XFRM.V_CUSTOMER;
CREATE 
OR REPLACE VIEW ORDER_ANALYSIS.V_CUSTOMER_CORE AS 
SELECT 
  CUSTOMER_ID, 
  ADDRESS, 
  PHONE_NO, 
  CATEGORY, 
  STATUS, 
  TOTAL_ORDERS, 
  TOTAL_INVOICE_AMOUNT, 
  CREATE_DATE, 
  CREATE_USER 
FROM 
  ORDER_XFRM.V_CUSTOMER 
WHERE 
  STATUS = 'ACTIVE';
SELECT 
  * 
FROM 
  ORDER_ANALYSIS.V_CUSTOMER_CORE;
CREATE 
OR REPLACE VIEW ORDER_XFRM.V_SALES_ORDER_DETAIL AS 
SELECT 
  ORDER_ID, 
  ORDER_DATE, 
  CUSTOMER_ID, 
  ITEM_ID, 
  QTY, 
  PRICE, 
  TOTAL_AMOUNT, 
  CREATE_DATE, 
  CREATE_USER 
FROM 
  ORDER_BASE.T_SALES_ORDER_DETAIL;
SELECT 
  * 
FROM 
  ORDER_XFRM.V_SALES_ORDER_DETAIL;
CREATE 
OR REPLACE VIEW ORDER_XFRM.V_SALES_ORDER_HEADER AS 
SELECT 
  ORDER_ID, 
  ORDER_DATE, 
  STATUS, 
  CUSTOMER_ID, 
  ITEM_COUNT, 
  TOTAL_AMOUNT, 
  DISCOUNT, 
  COUPON, 
  CREATE_DATE, 
  CREATE_USER 
FROM 
  ORDER_BASE.T_SALES_ORDER_HEADER;
SELECT 
  * 
FROM 
  ORDER_XFRM.V_SALES_ORDER_HEADER;
CREATE 
OR REPLACE VIEW ORDER_ANALYSIS.V_SALES_ORDER_HDR_CORE AS 
SELECT 
  ORDER_ID, 
  ORDER_DATE, 
  STATUS, 
  CUSTOMER_ID, 
  ITEM_COUNT, 
  TOTAL_AMOUNT, 
  DISCOUNT, 
  COUPON, 
  CREATE_DATE, 
  CREATE_USER 
FROM 
  ORDER_XFRM.V_SALES_ORDER_HEADER 
WHERE 
  ORDER_DATE > CURRENT_DATE;
SELECT 
  * 
FROM 
  ORDER_ANALYSIS.V_SALES_ORDER_HDR_CORE;
CREATE 
OR REPLACE VIEW ORDER_XFRM.V_PROMOTION AS 
SELECT 
  PROMOTION_ID, 
  CUSTOMER_CATEGORY, 
  PROMOTION_TYPE, 
  PROMOTION_VALUE, 
  COMMENT 
FROM 
  ORDER_BASE.T_PROMOTION;
SELECT 
  * 
FROM 
  ORDER_XFRM.V_PROMOTION;
CREATE 
OR REPLACE FUNCTION ORDER_BASE.F_PROMOTION_DISCOUNT() RETURNS TABLE (
  CUSTOMER_ID VARCHAR(100), 
  ORDER_ID VARCHAR(100), 
  DISCOUNT NUMBER(10, 2) DEFAULT 0
) AS $$ 
SELECT 
  coc.CUSTOMER_ID, 
  coc.ORDER_ID, 
  CASE WHEN p.PROMOTION_TYPE = 'DISCOUNT' THEN coc.TOTAL_AMOUNT * p.PROMOTION_VALUE / 100 WHEN coc.CATEGORY = 'REGULAR' THEN coc.TOTAL_AMOUNT * p.PROMOTION_VALUE ELSE 0 END AS DISCOUNT 
FROM 
  (
    SELECT 
      cu.CUSTOMER_ID, 
      soh.COUPON, 
      soh.ORDER_ID, 
      cu.CATEGORY, 
      soh.TOTAL_AMOUNT 
    FROM 
      ORDER_ANALYSIS.V_SALES_ORDER_HDR_CORE soh 
      INNER JOIN ORDER_ANALYSIS.V_CUSTOMER_CORE cu ON soh.CUSTOMER_ID = cu.CUSTOMER_ID
  ) coc 
  LEFT JOIN ORDER_XFRM.V_PROMOTION p ON coc.CATEGORY = p.CUSTOMER_CATEGORY 
  AND (
    coc.COUPON IS NULL 
    OR p.PROMOTION_TYPE = coc.COUPON
  ) 
WHERE 
  p.PROMOTION_TYPE IS NOT NULL 
  AND p.PROMOTION_TYPE != 'LOYALTY' $$;
SELECT 
  * 
FROM 
  TABLE(
    ORDER_BASE.F_PROMOTION_DISCOUNT()
  );
CREATE 
OR REPLACE PROCEDURE ORDER_BASE.P_INVOICE_GENERATE() RETURNS VARCHAR AS $$ BEGIN TRUNCATE TABLE ORDER_BASE.T_INVOICE;
INSERT INTO ORDER_BASE.T_INVOICE (
  ORDER_ID, ORDER_DATE, CUSTOMER_ID, 
  INVOICE_DATE, TAX_AMOUNT, TOTAL_AMOUNT, 
  DISCOUNT, FINAL_INVOICE_AMT, CREATE_DATE, 
  CREATE_USER
) 
SELECT 
  soh.ORDER_ID, 
  soh.ORDER_DATE, 
  soh.CUSTOMER_ID, 
  CURRENT_DATE AS INVOICE_DATE, 
  soh.TOTAL_AMOUNT * 9 / 100 AS TAX_AMOUNT, 
  soh.TOTAL_AMOUNT, 
  pd.DISCOUNT, 
  (soh.TOTAL_AMOUNT * 9 / 100) + soh.TOTAL_AMOUNT - pd.DISCOUNT AS FINAL_INVOICE_AMT, 
  CURRENT_DATE AS CREATE_DATE, 
  'DEFAULT' AS CREATE_USER 
FROM 
  ORDER_ANALYSIS.V_SALES_ORDER_HDR_CORE soh 
  INNER JOIN TABLE(
    ORDER_BASE.F_PROMOTION_DISCOUNT()
  ) pd ON soh.ORDER_ID = pd.ORDER_ID;
MERGE INTO ORDER_BASE.T_SALES_ORDER_HEADER AS target USING (
  SELECT 
    ORDER_ID, 
    SUM(DISCOUNT) AS SUM_DISCOUNT 
  FROM 
    ORDER_BASE.T_INVOICE 
  GROUP BY 
    ORDER_ID
) AS source ON target.ORDER_ID = source.ORDER_ID WHEN MATCHED THEN 
UPDATE 
SET 
  DISCOUNT = source.SUM_DISCOUNT;
MERGE INTO ORDER_BASE.T_CUSTOMER AS target USING (
  SELECT 
    CUSTOMER_ID, 
    (
      SUM(TOTAL_AMOUNT) + (
        SUM(TOTAL_AMOUNT) * 9 / 100
      ) - SUM(DISCOUNT)
    ) AS SUM_AMOUNT 
  FROM 
    ORDER_ANALYSIS.V_SALES_ORDER_HDR_CORE 
  GROUP BY 
    CUSTOMER_ID
) AS source ON target.CUSTOMER_ID = source.CUSTOMER_ID WHEN MATCHED THEN 
UPDATE 
SET 
  TOTAL_INVOICE_AMOUNT = source.SUM_AMOUNT;
MERGE INTO ORDER_BASE.T_CUSTOMER AS target USING (
  SELECT 
    CUSTOMER_ID, 
    CATEGORY, 
    TOTAL_AMOUNT_COUNT, 
    PROMOTION_TYPE, 
    PROMOTION_VALUE 
  FROM 
    (
      SELECT 
        soh.CUSTOMER_ID, 
        CATEGORY, 
        TOTAL_AMOUNT_COUNT 
      FROM 
        (
          SELECT 
            CUSTOMER_ID, 
            COUNT(TOTAL_AMOUNT) AS TOTAL_AMOUNT_COUNT 
          FROM 
            ORDER_ANALYSIS.V_SALES_ORDER_HDR_CORE 
          WHERE 
            TOTAL_AMOUNT > 1000 
          GROUP BY 
            CUSTOMER_ID
        ) AS soh 
        INNER JOIN ORDER_ANALYSIS.V_CUSTOMER_CORE AS cu ON soh.CUSTOMER_ID = cu.CUSTOMER_ID
    ) AS co 
    INNER JOIN ORDER_XFRM.V_PROMOTION AS pr ON co.CATEGORY = pr.CUSTOMER_CATEGORY 
  WHERE 
    PROMOTION_TYPE = 'LOYALTY'
) AS source ON target.CUSTOMER_ID = source.CUSTOMER_ID WHEN MATCHED THEN 
UPDATE 
SET 
  LOYALTY_POINTS = source.TOTAL_AMOUNT_COUNT * source.PROMOTION_VALUE;
RETURN 'SUCCESS';
END;
$$;
CALL ORDER_BASE.P_INVOICE_GENERATE();
SELECT 
  * 
FROM 
  ORDER_BASE.T_INVOICE;
SELECT 
  * 
FROM 
  ORDER_BASE.T_SALES_ORDER_HEADER;
SELECT 
  * 
FROM 
  ORDER_BASE.T_CUSTOMER;
CREATE 
OR REPLACE VIEW ORDER_ANALYSIS.V_INVOICE AS 
SELECT 
  ORDER_ID, 
  ORDER_DATE, 
  CUSTOMER_ID, 
  INVOICE_DATE, 
  TAX_AMOUNT, 
  TOTAL_AMOUNT, 
  DISCOUNT, 
  FINAL_INVOICE_AMT, 
  CREATE_DATE, 
  CREATE_USER 
FROM 
  ORDER_BASE.T_INVOICE;
SELECT 
  * 
FROM 
  ORDER_ANALYSIS.V_INVOICE;
